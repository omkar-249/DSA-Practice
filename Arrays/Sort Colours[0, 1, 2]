class Solution {
    public void sortColors(int[] nums) {
        int currCol = 0;
        int i1=0, i2=0, i3=nums.length-1;

        while(i1 < i3){
            if(nums[i1] == currCol){
                i1++;
                i2++; 
            }else if(nums[i2] == currCol){
                swap(i1, i2, nums);
                i1++;
                i2++;
            }else if(nums[i3] == currCol){
                swap(i1, i3, nums);
                i1++;
                i2++;
                i3--;
            }else{
                i2++;
                i3--;
                if(i2>i3){
                    currCol++;
                    i2 = i1 + 1;
                    i3 = nums.length-1;
                }
            }
        }
    }

    void swap(int i1, int i2, int[] nums){
                int temp = nums[i2];
                nums[i2] = nums[i1];
                nums[i1] = temp;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
