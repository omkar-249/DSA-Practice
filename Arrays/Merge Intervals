class Solution {
    public int[][] merge(int[][] array) {

        for(int i=0; i<array.length; i++){
            for(int j=0; j<array.length-1-i; j++){
                if(array[j][0] > array[j+1][0]){
                    int temp1 = array[j][0];
                    int temp2 = array[j][1];
                    array[j][0] = array[j + 1][0];
                    array[j][1] = array[j + 1][1];
                    array[j + 1][0] = temp1;
                    array[j + 1][1] = temp2;
                }
            }   
        }

        List<String> list = new ArrayList<>();
        int fIndex = -1;
        int sIndex = -1;
        for(int i=0; i<array.length; i++){

            if(fIndex == -1){
                fIndex = array[i][0];
                sIndex = array[i][1];
            }

            if(i+1 < array.length && array[i][1] >= array[i+1][0]){
                
                if(array[i][1] >= array[i+1][1])
                    sIndex = array[i][1];
                else
                    sIndex = array[i+1][1];
            }else{
                list.add(fIndex + "-" + sIndex);
                fIndex = sIndex = -1;
            }
        }
        System.out.println("List : " + list);
        int[][] res = new int[list.size()][2];
        int i = 0;
        for(String s : list){
            res[i][0] = Integer.parseInt(s.split("-")[0]);
            res[i][1] = Integer.parseInt(s.split("-")[1]);
            i++;
        }

        return res;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
Example 3:

Input: intervals = [[4,7],[1,4]]
Output: [[1,7]]
Explanation: Intervals [1,4] and [4,7] are considered overlapping.
 
